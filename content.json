{"pages":[],"posts":[{"title":"Hexo 설치 및 사용법","text":"👉 Intro Hexo는 Hugo나 Jeckyll과 같은 정적 웹 사이트 생성기입니다. 간단히 누구나 쉽게 웹 사이트를 만들고 퍼블리싱 할 수 있는 것이 특징입니다. Hexo는 Node.js 기반으로 빠른 속도로 생성하고 빌드하는데 필요한 수 많은 파일들이 단 시간에 해결됩니다. 👉 Hexo 설치 및 사용법 🔵 Node.js와 NPM 설치 Node.js와 NPM을 설치해야 합니다. Node.js 설치 🔵 Hexo 설치 이제 Hexo를 설치해봅시다. 1$ npm install -g hexo-cli 🔵 사이트 생성 및 실행 생성할 아무 폴더에서 다음과 같은 명령어를 칩니다. 1$ hexo init &lt;site-name&gt; 이제 다음과 같은 명령어를 통해 실행이 가능합니다. 1$ hexo server 🔵 포스팅 하기 다음과 같은 명령어를 통해 새로운 포스트를 만들 수 있습니다. 1$ huxo new post &lt;post-name&gt; post가 아닌 다른 layout도 생성 할 수 있습니다. Page : 새 글을 추가하는 것이 아닌 해당 경로로 직접 접근해야 볼 수 있는 페이지 입니다. Draft : 바로 게시하지 않고 작성할 수 있는 초안입니다. publish 명령어를 통해 배포할 수 있습니다. 🔵 테마 설치 이 곳에서 여러가지 Hexo 테마를 볼 수 있습니다. 마음에 드는 것을 고른 뒤 다음과 같은 명령어를 칩니다. 1$ git clone &lt;repo-url&gt; themes/&lt;theme name&gt; 디렉토리 내에 _config.yml에서 테마를 수정 할 수 있습니다. _config.yml1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: &lt;theme-name&gt; 👉 Github에 배포 배포하기에 앞서 .github.io 라는 이름의 repository를 만들고 다음 명령어를 쳐서 라이브러리를 설치합니다. 1$ npm install hexo-deployer-git --save _config.yml에서 프로잭트 설정을 해주면 됩니다. _config.yml123456789101112# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://nawook96.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/nawook96/nawook96.github.io 이제 다음 명령으로 generating하고 deploy할 수 있습니다. 12$ hexo generate$ hexo deploy 다음 명령은 동일하게 작동하지만, 더욱 간결하게 보낼 수 있습니다. 1$ hexo g -d","link":"/2019/04/05/00-Hexo/"},{"title":"Go. Go tutorial","text":"Go go-tutorial provides tutorial how to use Golang. In the tutorial, There are basic syntax of Golang. All code is here Why use go? Golang is designed at google by Robert Griesemer, Rob Pike, and Ken Thompsom. Golang is programming language has been developed for fast performance, reliability, convenience, and easy. Golang‘s feature : Statically type Compiled language Garbage collection Concurrency Support multi-core environment Fast compile Table of Contents will be update.. 1. basics How to build Basic Syntax Variable 2. advanced Getting Started Linux123$ wget https://storage.googleapis.com/golang/go&lt;version&gt;.linux-&lt;architecture&gt;.tar.gz$ tar vxzf go&lt;version&gt;.linux-&lt;architecture&gt;.tar.gz$ sudo mv go /usr/local/ And set environment variable12$ echo \"export PATH=$PATH:/usr/local/go/bin\" &gt;&gt; .bashrc$ sourch .bashrc Ubuntu12$ sudo apt-get update$ sudo apt-get install golang CentOS1$ sudo yum install golang Mac OS XYou can download pkg file in here. WindowsYou can download install file in here. And you set environment variable. (ex: PATH=C:\\Go\\bin, GOPATH=C:\\myGo)And make pkg,bin,src folder. Version Go 1.12.1 Author Dongwook, Shin @nawook96 Homepage : https://nawook96.github.io Reference http://pyrasis.com/go.html","link":"/2019/04/08/00-init/"},{"title":"Go. How to build","text":"How to buildMake hello.go file like /GOPATH/src/hello.go 1234567package mainimport &quot;fmt&quot;func main() { fmt.Println(&quot;Hello, world!&quot;)} Execute the following command in terminal12go build hello.gogo run hello.go Golang consists of all parts of the package. Therefore, package setting is placed on the top of source codes. Also, the main package is the first to run. 1package main import is a keyword that uses packages. We use fmt package to print strings. 1import &quot;fmt&quot; Like C, C++, Java, and C#, start with the main function. And using the Println function of the fmt package, Outputs a string “Hello, world!”. 123func main() { fmt.Println(&quot;Hello, world!&quot;)}","link":"/2019/04/08/01-Build/"},{"title":"Hexo의 여러가지 사용법","text":"👉 Intro Hexo에 대해서 알아봤으니 이제 사용법에 대해 천천히 알아봅시다. Scaffolds Front-matter Tag Plugin Asset Folder 👉 Scaffolds 스캐폴드는 ‘hexo new’를 통해 새로운 파일을 생성할 때 기본적으로 만들어지는 구조를 정의하는 파일 입니다. /scaffolds/post.md12345---title: Hexo의 여러가지 사용법date: 1554483486000tags:--- 기본적으로 이런 구조일 것 입니다. 여기서 tags에 파일 생성시 기본으로 달아줄 태그를 달아줄 수 있습니다. 뿐만 아니라 카테고리와 썸네일도 설정 할 수 있습니다. 👉 Front-matter Front-matter는 새로운 파일 생성 시 가장 위에있는 블락입니다. /source/_post/01-Hexo.md12345678---title: 01_Hexo의 여러가지 사용법date: 2019-04-06 01:58:06tags: - hexocategories: - Hexo--- 스캐폴드를 통해서 자주 사용하는 것들을 정의해두면 편리합니다. layout : 레이아웃 title : 제목 date : 배포 날짜 updated : 수정 날짜 comments : 댓글 기능 여부(true/false) tags : 태그 categories : 카테고리 permalink : 포스트의 URL thumbnail : 썸네일 👉 Tag Plugin 태그 플러그인은 Hexo에서 자체적으로 지원하는 문법으로, 마크다운 외에 포스팅을 하기 위한 문법입니다. 제가 자주 사용하는 것만 정리 해보자면, 🔵 인용 구문 MD에서 제공하는 인용 구문보다 더 많은 정보를 추가 할 수 있습니다. How to use123{% blockquote [author[, source]] [link] [source_link_title] %}content{% endblockquote %} Example123{% blockquote 신동욱, https://github.com/nawook96 %}배고프다{% endblockquote %} Result배고프다 신동욱,github.com/nawook96 🔵 코드 삽입 lang은 https://highlightjs.org 에서 지원하는 언어만 나옵니다.(highlight), 파일명 명시도 가능합니다. How to use123{% codeblock [title] [lang:language] [url] [link text] %}code snippet{% endcodeblock %} Example123{% codeblock lang:objc hi.h%}[rectangle setX: 10 y: 10 width: 20 height: 20];{% endcodeblock %} Resulthi.h1[rectangle setX: 10 y: 10 width: 20 height: 20]; 🔵 YOUTUBE 삽입 How to use1{% youtube video_id %} Example1{% youtube Z0ti3pBKmes %} Result 👉 Asset Folder Asset Folder는 각 포스트에서 사용하는 여러가지 리소스를 저장하는 폴더입니다. _config.yml 에서 다음과 같이 수정하여 설정 하면, 새로운 포스팅을 할 때마다 자동으로 폴더가 생성 됩니다. _config.yml1post_asset_folder: true 이제 생성된 파일에 있는 여러가지 리소스를 경로를 설정해 주지 않아도 다음과 같이 Tag Plugin을 통해 사용할 수 있습니다. How to use123{% asset_path &lt;file-name&gt; %}{% asset_img &lt;file-name&gt; [title] %}{% asset_link &lt;url-name&gt; [title] %} 👉 Reference 여기에서 많이 참고했습니다.(https://futurecreator.github.io/2016/06/21/hexo-basic-usage/)","link":"/2019/04/06/01-Hexo/"},{"title":"Go. Basic Syntax","text":"Curly bracket({}) You must start a square bracket on the same line when you start a function, condition statement, or loop statement, such as: 123456789func main() { i := 10 if i &gt; 5 { fmt.Println(&quot;above 5&quot;) } for i := 0; i &lt; 5; i++ { fmt.Println(i) }} Semicolon Unlike C,C++, you usually omit semicolon at the end of the phrase in Golang. 1fmt.Println(&quot;Hello, world!&quot;) If you want to use multiple phrases per line, you can separate them with semicolons. 1fmt.Println(&quot;Hello,&quot;);fmt.Println(&quot;world!&quot;) Comment out The Comment out has two type, one line and range. 1// fmt.Println(&quot;Hello, world!&quot;) 1234/*fmt.Println(&quot;Hello,&quot;)fmt.Println(&quot;world!&quot;)*/","link":"/2019/04/08/02-Basic-Syntax/"},{"title":"Go. Variable","text":"Declaration There are two ways to declare a variable in the Golang: using the var keyword and omitting the template. 12345var i intvar s stringvar age1 int = 10var name1 string = &quot;Shin&quot; If you omit data-type, the variable is determined by data-type of value that you enter. However, if you omit the data-type, you must define the initial value. 123var age2 = 20var name2 = &quot;Kim&quot;var address // compiled error Short declaration := allows you to simply declare and initialize variables without using var and type keywords. 12age3 := 30name3 := &quot;Park&quot; Multple declaration you can declare multiple variables separated by ,(comma). Then, values are subsituted in the order in which variables are declared and must be equal to number of variables.123var x1, y1 int = 30, 50 // x = 30, y = 50var age4, name4 = 40, &quot;Choi&quot; // age = 10, name = &quot;Choi&quot;a, b, c, d := 1, 3.4, &quot;Hello, world!&quot;, false // a = 1, b = 3.4, c = &quot;Hello, world!&quot;, d = false. You can enter values for multiple variables even after a variable is declared. In Golang, this feature is called Parallel assignment. 1234var x3, y3 intvar age6 intx4, y4, age = 10, 20, 5 // x = 10, y = 20, age = 5: Parallel assignment var keyword and () allow you to declare and initialize multiple variables. 1234var ( x2, y2 int = 30, 50 // x and y : int. age5, name5 = 10, &quot;Maria&quot; // age : int, name : string)","link":"/2019/04/08/03-Variable/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"install","slug":"install","link":"/tags/install/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"theme","slug":"theme","link":"/tags/theme/"},{"name":"go","slug":"go","link":"/tags/go/"},{"name":"tutorial","slug":"tutorial","link":"/tags/tutorial/"},{"name":"build","slug":"build","link":"/tags/build/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"curly bracket","slug":"curly-bracket","link":"/tags/curly-bracket/"},{"name":"semicolon","slug":"semicolon","link":"/tags/semicolon/"},{"name":"comment out","slug":"comment-out","link":"/tags/comment-out/"},{"name":"declaration","slug":"declaration","link":"/tags/declaration/"},{"name":"short","slug":"short","link":"/tags/short/"},{"name":"multiple","slug":"multiple","link":"/tags/multiple/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Go","slug":"Go","link":"/categories/Go/"}]}